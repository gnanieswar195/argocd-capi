apiVersion: apps/v1
kind: Deployment
metadata:
  name: management-cluster-installer-deployment
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: management-cluster-installer
  template:
    metadata:
      labels:
        app: management-cluster-installer
    spec:
      containers:
      - name: management-cluster-installer
        image: alpine:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            # Install necessary tools
            apk update && apk add --no-cache curl sudo

            # Install kubectl
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && \
            chmod +x kubectl && \
            mv kubectl /usr/local/bin/ && \
            echo "kubectl installed successfully."

            # Fetch the latest clusterctl version if "latest" is specified
            if [ "{{ .Values.clusterctl.version }}" = "latest" ]; then
              latest_version=$(curl -s https://api.github.com/repos/kubernetes-sigs/cluster-api/releases/latest | grep tag_name | cut -d '"' -f 4) && \
              curl -L https://github.com/kubernetes-sigs/cluster-api/releases/download/${latest_version}/clusterctl-linux-amd64 -o clusterctl && \
              chmod +x clusterctl && \
              mv clusterctl /usr/local/bin/ && \
              echo "clusterctl installed successfully."
            else
              curl -L https://github.com/kubernetes-sigs/cluster-api/releases/download/{{ .Values.clusterctl.version }}/clusterctl-linux-amd64 -o clusterctl && \
              chmod +x clusterctl && \
              mv clusterctl /usr/local/bin/ && \
              echo "clusterctl version {{ .Values.clusterctl.version }} installed successfully."
            fi

            echo "Clusterctl version:"
            clusterctl version

            # Function to check if all necessary pods are in the 'Running' state
            check_pods_running() {
              namespaces="capi-system capo-system cert-manager capi-kubeadm-bootstrap-system capi-kubeadm-control-plane-system"
              for ns in $namespaces; do
                pods=$(kubectl get pods -n $ns -o jsonpath='{.items[*].status.phase}')
                for pod_status in $pods; do
                  if [ "$pod_status" != "Running" ]; then
                    return 1
                  fi
                done
              done
              return 0
            }

            # Check if the required components are already installed and running
            if check_pods_running; then
              echo "Management cluster components already installed and running, skipping initialization."
            else
              echo "Setting up the management cluster..."
              export KUBECONFIG=/kubeconfig/kubeconfig && \
              export CLUSTER_TOPOLOGY=true && \
              clusterctl init --infrastructure {{ .Values.clusterctl.infrastructureProvider }}
              echo "Management cluster initialized successfully."
            fi

            sleep infinity
        volumeMounts:
        - name: kubeconfig-volume
          mountPath: /kubeconfig/kubeconfig
          subPath: kubeconfig
      restartPolicy: Always
      volumes:
      - name: kubeconfig-volume
        secret:
          secretName: {{ .Values.kubeconfigSecret }}
